package com.amazon.textract.pdf;

import com.amazon.textract.pdf.TextLine;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

/**
 * Class to manipulate Textract line block.
 */
public class TextractLineBlockManipulator {
    /** Blocks data mapped with there respetive ID */
    private Map<String, TextLine> lineBlocks;
    /** Block IDs mapped with their respective page number */
    private Map<Integer, List<String>> blocksOnPage;
    
    /**
     * Construct from a block file
     * <p> 
     * block are JSON file with a single object "Blocks" which holds the list of 
     * blocks are generated by Amazon Textract
     * <p> 
     * @param blockFile path of the block file
     * @return this
     */
    public TextractLineBlockManipulator(String blockFile) {
        this.lineBlocks = new HashMap<>();
        this.blocksOnPage = new HashMap<>();

        try {
            // create parser and loop thourgh all blocks
            String blockString = new String(Files.readAllBytes(Paths.get(blockFile)));
            JSONObject obj = new JSONObject(blockString);
            JSONArray blocksObj = obj.getJSONArray("Blocks");
            for (int i = 0; i < blocksObj.length(); i++) {
                JSONObject blockObj = blocksObj.getJSONObject(i);

                if (blockObj.getString("BlockType").equals("LINE")) {
                    this.lineBlocks.put(
                        blockObj.getString("Id"), 
                        new TextLine(
                            blockObj.getJSONObject("Geometry").getJSONObject("BoundingBox").getDouble("Left"),
                            blockObj.getJSONObject("Geometry").getJSONObject("BoundingBox").getDouble("Top"),
                            blockObj.getJSONObject("Geometry").getJSONObject("BoundingBox").getDouble("Width"),
                            blockObj.getJSONObject("Geometry").getJSONObject("BoundingBox").getDouble("Height"),
                            blockObj.getString("Text")
                        )
                    );
                } else if (blockObj.getString("BlockType").equals("PAGE")){
                    List<String> ids = new ArrayList<String>();
                    JSONArray relationObj = blockObj.getJSONArray("Relationships");
                    for (int j=0; j<relationObj.length(); j++) {
                        JSONArray idsObj = relationObj.getJSONObject(j).getJSONArray("Ids");
                        for (int k=0; k<idsObj.length(); k++) {
                            ids.add(idsObj.getString(k));
                        }
                    }
                    this.blocksOnPage.put(Integer.valueOf(blockObj.getInt("Page")), ids);
                } //else we don't care of the other type of blocks
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Returns a Map with the line blocks on the given page "page", mapped with 
     * their respective id . If the page does not exist, returns an empty Map
     * 
     * @param page page number, starting from 1 (as in Textract output)
     * @return line block object with the text asociated to the line and its position 
     * on tha page (bounding box)
     */
    public Map<String, TextLine> getLineBlocksOnPage(int page) {
        Map<String, TextLine> lineBlocksOnPage = new HashMap<String, TextLine>();
        String id = null;
        if (this.blocksOnPage.get(page)!=null){
            for (int i=0; i<this.blocksOnPage.get(page).size(); i++) {
                id = this.blocksOnPage.get(page).get(i);
                if (this.lineBlocks.get(id)!=null) {
                    lineBlocksOnPage.put(id, this.lineBlocks.get(id));
                } //else the block given by "id" is not a line, hence we don't care
            }
        }
        return lineBlocksOnPage;
    }

    /**
     * Returns the lines on a given page. If the page does not exist, returns an 
     * empty List
     * @param page page number, starting from 1 (as in Textract output)
     * @return for each line, the text and its position (bounding box). If the page 
     * does not exist, returns an empty List
     */
    public List<TextLine> getLineOnPage(int page) {
        List<TextLine> lines = new ArrayList<TextLine>();
        String id = null;
        if (this.blocksOnPage.get(page)!=null){
            for (int i=0; i<this.blocksOnPage.get(page).size(); i++) {
                id = this.blocksOnPage.get(page).get(i);
                if (this.lineBlocks.get(id)!=null) {
                    lines.add(this.lineBlocks.get(id));
                }
            }
        } //else, we return
        return lines;
    }


    // Getters
    /** 
     * Returns the blocks data mapped with their block ID 
     */
    public Map<String, TextLine> getLineBlocks() {
        return this.lineBlocks;
    }

    /** 
     * Returns the list of block IDs mapped with their page number (i.e. on which 
     * page they are located) 
     */
    public Map<Integer, List<String>> getBlocksOnPage() {
        return this.blocksOnPage;
    }
}
